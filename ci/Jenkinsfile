/*
 * Copyright (C) 2010-2022 Talend Inc. - www.talend.com
 *
 * This source code is available under agreement available at https://www.talend.com/legal-terms/us-eula
 *
 * You should have received a copy of the agreement along with this program; if not, write to Talend SA
 * 5 rue Salomon de Rothschild - 92150 Suresnes, France
 *
 */
def POD_DEFINITION_FILE = 'ci/resources/buildPodDefinition.yaml'

def artifactoryCredentials = usernamePassword(
  credentialsId: 'artifactory-datapwn-credentials',
  passwordVariable: 'ARTIFACTORY_PASSWORD',
  usernameVariable: 'ARTIFACTORY_LOGIN')

final def mavenSettings = configFile(
  fileId: 'maven-settings-nexus-zl',
  variable: 'MAVEN_SETTINGS')

pipeline {
  agent {
    kubernetes {
      yamlFile POD_DEFINITION_FILE
      defaultContainer 'talend-builder'
    }
  }

  environment {
    MAVEN_OPTS = "-Dmaven.artifact.threads=128 -Dorg.slf4j.simpleLogger.showThreadName=true -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss -Dtalend.maven.decrypter.m2.location=${WORKSPACE}/.jenkins/"
    ARTIFACTORY_REGISTRY = "artifactory.datapwn.com"
    SLACK_CHANNEL = 'tmp-tdp-10480-bump-tcompv0'
    DOCKER_DEV_REPOSITORY_NAME = 'docker-dev-local'
    DOCKER_DEV_REGISTRY_URL = "artifactory.datapwn.com/docker-dev-local/talend/common"
    NEXUS_REPOSITORY_URL = "https://artifacts-zl.talend.com/nexus/content/repositories"
  }

  options {
    ansiColor('xterm')
    timeout(time: 2, unit: 'HOURS')
    skipStagesAfterUnstable()
    buildDiscarder(logRotator(numToKeepStr: '5'))
    disableConcurrentBuilds()
  }

  parameters {
    choice(name: 'Action',
      choices: ['STANDARD', 'DEPLOY'],
      description: 'Kind of running : \nSTANDARD (default), normal building \nDEPLOY : build & deploy service Docker image')
  }

  stages {
    stage('Prepare build') {
      steps {
        script {
          echo 'Docker login'
          withCredentials([artifactoryCredentials]) {
            final String dockerLoginScriptPath = 'ci/resources/login_to_docker.sh'
            sh """
                bash '${dockerLoginScriptPath}' \
                  "\${ARTIFACTORY_REGISTRY}"  \
                  "\${ARTIFACTORY_LOGIN}" \
                  "\${ARTIFACTORY_PASSWORD}"
              """
          }
        }
      }
    }


    stage('Build') {
      steps {
        configFileProvider([mavenSettings]) {
          sh '''#!/bin/bash
             mvn clean install \
              --batch-mode \
              --threads 1C \
              --update-snapshots \
              --define 'skipTests' \
              --settings "${MAVEN_SETTINGS}"
              
             mvn test \
              --batch-mode \
              --threads 1C \
              --settings "${MAVEN_SETTINGS}"
             '''
        }
      }
    }

    stage('Deploy Docker Image') {
      when {
        expression { params.Action == 'DEPLOYZZ' }
      }
      steps {
        script {
          final String scriptPath = 'ci/resources/deploy_service_docker_image.sh'

          final def pom = readMavenPom file: 'pom.xml'
          final String projectVersionFromPom = pom.version
          final String projectVersionFromPomWithoutSnapshot = projectVersionFromPom.replace('-SNAPSHOT', '')

          configFileProvider([mavenSettings]) {
            sh """
                bash '${scriptPath}' \
                  '${DOCKER_DEV_REGISTRY_URL}' \
                  '${projectVersionFromPomWithoutSnapshot}' \
                  '${MAVEN_SETTINGS}'
              """
          }
        }
      }
    }

    stage('Deploy service zip') {
      when {
        expression { params.Action == 'DEPLOY' }
      }
      steps {
        script {
          final String scriptPath = 'ci/resources/deploy_service_zip_artefact.sh'

          final def pom = readMavenPom file: 'pom.xml'
          final String projectVersionFromPom = pom.version

          final String nexusRepositoryId = projectVersionFromPom.endsWith('-SNAPSHOT')
            ? 'snapshots'
            : 'releases'

          configFileProvider([mavenSettings]) {
            sh """
                bash '${scriptPath}' \
                  '${nexusRepositoryId}' \
                  '${NEXUS_REPOSITORY_URL}' \
                  '${projectVersionFromPom}' \
                  '${MAVEN_SETTINGS}'
              """
          }
        }
      }
    }
  }

  post {
    success {
      slackSend(color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "${SLACK_CHANNEL}")
    }
    failure {
      slackSend(color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "${SLACK_CHANNEL}")
    }
  }
}