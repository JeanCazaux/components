/*
 * Copyright (C) 2010-2022 Talend Inc. - www.talend.com
 *
 * This source code is available under agreement available at https://www.talend.com/legal-terms/us-eula
 *
 * You should have received a copy of the agreement along with this program; if not, write to Talend SA
 * 5 rue Salomon de Rothschild - 92150 Suresnes, France
 *
 */
def POD_DEFINITION_FILE = 'ci/resources/buildPodDefinition.yaml'

def artifactoryCredentials = usernamePassword(
  credentialsId: 'artifactory-datapwn-credentials',
  passwordVariable: 'ARTIFACTORY_PASSWORD',
  usernameVariable: 'ARTIFACTORY_LOGIN')

final def mavenSettings = configFile(
  fileId: 'maven-settings-nexus-zl',
  variable: 'MAVEN_SETTINGS')

String dockerAndGitTag = null
String projectBuildVersion = ''
String projectNextVersion = ''

@NonCPS
static String getNewVersion (String version) {
  def pattern = ~/(\d{1,3})\.(\d{1,3})\.\d{1,4}$/
  String newVersion = version.replaceFirst(pattern) { _, major, minor -> "${major}.${(minor as int) + 1}.0" }
  newVersion += "-SNAPSHOT"
  return newVersion
}

pipeline {
  agent {
    kubernetes {
      yamlFile POD_DEFINITION_FILE
      defaultContainer 'talend-builder'
    }
  }

  environment {
    MAVEN_OPTS = "-Dmaven.artifact.threads=128 -Dorg.slf4j.simpleLogger.showThreadName=true -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss -Dtalend.maven.decrypter.m2.location=${WORKSPACE}/.jenkins/"
    ARTIFACTORY_REGISTRY = "artifactory.datapwn.com"
    SLACK_CHANNEL = 'tdp_ci'
    DOCKER_DEV_REPOSITORY_NAME = 'docker-dev-local'
    DOCKER_DEV_REGISTRY_URL = "artifactory.datapwn.com/docker-dev-local/talend/common"
    DOCKER_IMAGE_NAME = 'tcomp-components-api-service-rest-all-components'
    NEXUS_REPOSITORY_URL = "https://artifacts-zl.talend.com/nexus/content/repositories"
    TDP_MAINTENANCE_BRANCH_NAME = 'maintenance/tdp'
  }

  options {
    ansiColor('xterm')
    timeout(time: 2, unit: 'HOURS')
    skipStagesAfterUnstable()
    buildDiscarder(logRotator(numToKeepStr: '5'))
    disableConcurrentBuilds()
  }

  parameters {
    choice(name: 'Action',
      choices: ['STANDARD', 'DEPLOY', 'RELEASE'],
      description: 'Type of build : \nSTANDARD (default): compile & run tests \nDEPLOY : build & deploy TCOMPv0 service Docker image (TDP cloud) & zip artefact (TDP on-prem)\nRELEASE: build, deploy & release TCOMPv0 service Docker image (TDP cloud) & zip artefact (TDP on-prem)'
    )
    booleanParam(
      name: "specify_version",
      description: "RELEASE ACTION ONLY • Check if you want to specify a version for release. Otherwise, project version (from pom) is used",
      defaultValue: false
    )
    string(
      name: "release_version",
      description: "RELEASE ACTION ONLY • Release version. Won't be used if specify_version not checked",
      defaultValue: "0.0.0")
    string(
      name: "next_version",
      description: "RELEASE ACTION ONLY • Next version. Won't be used if specify_version not checked",
      defaultValue: "0.0.0-SNAPSHOT")
  }

  stages {
    stage('Validate parameters') {
      steps {
        script {
          final def pom = readMavenPom file: 'pom.xml'
          final String projectVersionFromPom = pom.version

          projectBuildVersion = projectVersionFromPom.replace('-SNAPSHOT', '')

          if (params.Action == 'RELEASE') {
            if (env.BRANCH_NAME != env.TDP_MAINTENANCE_BRANCH_NAME || !env.BRANCH_NAME.contains('anicolas')) {
              error("TCOMPv0 service should only be released on ${env.TDP_MAINTENANCE_BRANCH_NAME}")
            }

            if (params.specify_version && params.release_version.endsWith('-SNAPSHOT')) {
              error("Cannot release a SNAPSHOT version: ${params.release_version}")
            }

            if (params.specify_version && !params.next_version.endsWith('-SNAPSHOT')) {
              error("Next version number must be a SNAPSHOT version: ${params.next_version}")
            }

            if (params.specify_version) {
              projectBuildVersion = params.release_version
              projectNextVersion = params.next_version
            } else {
              // Default behavior: use version defined in POM & automatically compute next version
              projectNextVersion = getNewVersion(projectBuildVersion);
            }
          }

          echo "Building version: ${projectBuildVersion}"
          echo "Build action: ${params.Action}"
          echo 'The build\'s parameters are valid'
        }
      }
    }

    stage('Prepare build') {
      steps {
        script {
          dockerAndGitTag = "${projectBuildVersion}-${env.BUILD_TIMESTAMP}"

          echo 'Docker login'
          withCredentials([artifactoryCredentials]) {
            final String dockerLoginScriptPath = 'ci/resources/login_to_docker.sh'
            sh """
                bash '${dockerLoginScriptPath}' \
                  "\${ARTIFACTORY_REGISTRY}"  \
                  "\${ARTIFACTORY_LOGIN}" \
                  "\${ARTIFACTORY_PASSWORD}"
              """
          }
        }
      }
    }


    stage('Build & test') {
      steps {
        script {
          configFileProvider([mavenSettings]) {
            if (params.Action == 'RELEASE') {
              // NOTE: Artifacts are not re-built in push stage, this means they must be built directly with the version to release (a non-SNAPSHOT one)
              final String updateVersionScriptPath = 'ci/resources/set_release_version_in_pom.sh'
              sh """
                  bash '${updateVersionScriptPath}' \
                    '${projectBuildVersion}' \
                    '${MAVEN_SETTINGS}' \
                """
            }

            // This also builds the service ZIP file
            // Why do a "clean install" then a "test" and not a "clean test" right away? Because for some reason, it
            // does not work (some tests are failing...)
            sh '''#!/bin/bash
               mvn clean install \
                --batch-mode \
                --threads 1C \
                --update-snapshots \
                --define 'skipTests' \
                --settings "${MAVEN_SETTINGS}"
                
               mvn test \
                --batch-mode \
                --threads 1C \
                --settings "${MAVEN_SETTINGS}"
               '''
          }
        }
      }
    }

    stage('Build & deploy service Docker image') {
      when {
        expression { params.Action == 'DEPLOY' || params.Action == 'RELEASE' }
      }
      steps {
        script {
          final String scriptPath = 'ci/resources/build_and_deploy_service_docker_image.sh'

          // Docker images are always built with a non-SNAPSHOT version as it allows us later to promote them
          // to prod repository once they have been tested. This makes sure the version pushed to production is
          // exactly the one tested by the QA (no rebuild of the image in-between)
          configFileProvider([mavenSettings]) {
            sh """
                bash '${scriptPath}' \
                  '${DOCKER_DEV_REGISTRY_URL}' \
                  '${projectBuildVersion}' \
                  '${env.DOCKER_IMAGE_NAME}' \
                  '${dockerAndGitTag}' \
                  '${MAVEN_SETTINGS}'
              """
          }
        }
      }
    }

    stage('Deploy service zip artefact') {
      when {
        expression { params.Action == 'DEPLOY' || params.Action == 'RELEASE' }
      }
      steps {
        script {
          final String scriptPath = 'ci/resources/deploy_service_zip_artefact.sh'

          // Read POM once again since version could have been updated for release builds
          final def pom = readMavenPom file: 'pom.xml'
          final String projectVersionFromPom = pom.version

          final String nexusRepositoryId = projectVersionFromPom.endsWith('-SNAPSHOT')
            ? 'snapshots'
            : 'releases'

          // Contrary to docker images, one want the ability to publish SNAPSHOT versions of the ZIP artifact
          // This is why we're not using the project build version here but the project version from the POM
          // (which will be a SNAPSHOT for "DEPLOY" builds, and a non-SNAPSHOT for "RELEASE" ones)
          configFileProvider([mavenSettings]) {
            sh """
                bash '${scriptPath}' \
                  '${nexusRepositoryId}' \
                  '${NEXUS_REPOSITORY_URL}' \
                  '${projectVersionFromPom}' \
                  '${MAVEN_SETTINGS}'
              """
          }
        }
      }
    }

    stage('Commit & tag release') {
      when {
        expression { params.Action == 'RELEASE' }
      }

      steps {
        container(configuration.tsbiImage) {
          script {
            final String commitScriptPath = 'ci/resources/tag_release_and_set_new_version.sh'
            configFileProvider([mavenSettings]) {
              sh """
                  bash '${commitScriptPath}' \
                    '${dockerAndGitTag}' \
                    '${projectNextVersion}' \
                    '${MAVEN_SETTINGS}'
                """
            }
          }
        }
      }
    }
  }

  post {
    success {
      slackSend(color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "${SLACK_CHANNEL}")
    }
    failure {
      slackSend(color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "${SLACK_CHANNEL}")
    }
  }
}
